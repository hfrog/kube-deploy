# vim: set sw=2 :
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dex
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups: ["dex.coreos.com"] # API group created by dex
    resources: ["*"]
    verbs: ["*"]
    nonResourceURLs: []
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"] # To manage its own resources identity must be able to create CRDs.
    nonResourceURLs: []
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dex
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: dex
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex-config
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  config.yaml: |
    issuer: https://MASTER_IP:32000
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/dex.crt
      tlsKey: /etc/dex/tls/dex.key
    expiry:
      signingKeys: "6h"
      idTokens: "24h"
    connectors:
    - type: ldap
      id: ldap
      name: LDAP
      config:
        host: "__DEX__LDAP_HOST__"
        rootCA: /etc/dex/ldap/ldap-ca.crt
        bindDN: "__DEX__LDAP_BIND_DN__"
        bindPW: "__DEX__LDAP_BIND_PW__"
        userSearch:
          baseDN: "__DEX__LDAP_USERSEARCH_BASE_DN__"
          filter: "(objectClass=person)"
          username: mail
          idAttr: distinguishedName
          emailAttr: mail
          nameAttr: name
        groupSearch:
          baseDN: "__DEX__LDAP_GROUPSEARCH_BASE_DN__"
          filter: "(objectClass=group)"
          userAttr: distinguishedName
          groupAttr: member
          nameAttr: name
    oauth2:
      skipApprovalScreen: true

    staticClients:
    - id: kubernetes
      redirectURIs:
      - 'https://MASTER_IP:32001/callback'
      name: 'Dex web app'
      secret: "__DEX__STATIC_KUBERNETES_SECRET__"
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: dex
    addonmanager.kubernetes.io/mode: Reconcile
  name: dex
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex
      containers:
      - name: dex
        image: hfrog/dex:v2.7.1
        command:
        - /bin/sh
        - -c
        - /usr/local/bin/dex serve /etc/dex/cfg/config.yaml >K8S_LOG_DIR/$HOSTNAME.log 2>&1
        volumeMounts:
        - name: cfg
          mountPath: /etc/dex/cfg
          readOnly: true
        - name: varlog
          mountPath: K8S_LOG_DIR
          readOnly: false
        - name: dex-tls
          mountPath: /etc/dex/tls
        - name: ldap-ca-crt
          mountPath: /etc/dex/ldap
      initContainers:
      - name: install-config
        image: hfrog/dex-install-config:v1.1
        command:
        - /bin/sh
        - -c
        - /install-config.sh >K8S_LOG_DIR/dex-install-config.log 2>&1
        env:
        - name: DEX__LDAP_HOST
          valueFrom:
            secretKeyRef:
              name: dex-ldap
              key: host
        - name: DEX__LDAP_BIND_DN
          valueFrom:
            secretKeyRef:
              name: dex-ldap
              key: bindDN
        - name: DEX__LDAP_BIND_PW
          valueFrom:
            secretKeyRef:
              name: dex-ldap
              key: bindPW
        - name: DEX__LDAP_USERSEARCH_BASE_DN
          valueFrom:
            secretKeyRef:
              name: dex-ldap
              key: user_baseDN
        - name: DEX__LDAP_GROUPSEARCH_BASE_DN
          valueFrom:
            secretKeyRef:
              name: dex-ldap
              key: group_baseDN
        - name: DEX__STATIC_KUBERNETES_SECRET
          valueFrom:
            secretKeyRef:
              name: dex-static
              key: kubernetes_secret
        - name: DEX_CONFIG
          valueFrom:
            configMapKeyRef:
              name: dex-config
              key: config.yaml
        volumeMounts:
        - name: cfg
          mountPath: /etc/dex/cfg
          readOnly: false
        - name: varlog
          mountPath: K8S_LOG_DIR
          readOnly: false
      volumes:
      - name: cfg
        emptyDir: {}
      - name: varlog
        hostPath:
          path: K8S_LOG_DIR
      - name: dex-tls
        secret:
          secretName: dex-tls
      - name: ldap-ca-crt
        secret:
          secretName: ldap-ca-crt
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000
  selector:
    app: dex
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: dex-web-app
    addonmanager.kubernetes.io/mode: Reconcile
  name: dex-web-app
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: dex-web-app
  template:
    metadata:
      labels:
        app: dex-web-app
    spec:
      containers:
      - name: dex-web-app
        image: hfrog/dex-example-app:v2.6.1
        command:
        - /bin/sh
        - -c
        - /usr/local/bin/example-app
          --debug
          --client-id kubernetes
          --client-secret "$DEX__STATIC_KUBERNETES_SECRET"
          --issuer https://MASTER_IP:32000
          --issuer-root-ca K8S_CERTS_DIR/ca.crt
          --listen https://0.0.0.0:5555
          --tls-cert /etc/dex-web-app/tls/dex-web-app.crt
          --tls-key /etc/dex-web-app/tls/dex-web-app.key
          --redirect-uri https://MASTER_IP:32001/callback
          >K8S_LOG_DIR/$HOSTNAME.log 2>&1
        env:
        - name: DEX__STATIC_KUBERNETES_SECRET
          valueFrom:
            secretKeyRef:
              name: dex-static
              key: kubernetes_secret
        volumeMounts:
        - name: data
          mountPath: K8S_KUBESRV_DIR
          readOnly: true
        - name: varlog
          mountPath: K8S_LOG_DIR
          readOnly: false
        - name: dex-web-app-tls
          mountPath: /etc/dex-web-app/tls
      volumes:
      - name: data
        hostPath:
          path: K8S_KUBESRV_DIR
      - name: varlog
        hostPath:
          path: K8S_LOG_DIR
      - name: dex-web-app-tls
        secret:
          secretName: dex-web-app-tls
---
apiVersion: v1
kind: Service
metadata:
  name: dex-web-app
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  type: NodePort
  ports:
  - name: dex-web-app
    port: 5555
    protocol: TCP
    targetPort: 5555
    nodePort: 32001
  selector:
    app: dex-web-app
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex-web-app-init
  namespace: kube-system
  labels:
    k8s-app: dex-web-app
    addonmanager.kubernetes.io/mode: Reconcile
data:
  script: |
    #!/bin/bash
    # vim: set sw=2 :

    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail
    shopt -s expand_aliases

    error_report() {
      echo "errexit on line $(caller)" >&2
    }

    trap error_report ERR

    DEBUG=${DEBUG:-false}
    if [[ $DEBUG == true ]]; then
      set -x
    fi

    token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    alias kubectl="./kubectl --token=$token"

    crt=$(base64 < K8S_CERTS_DIR/dex-web-app.crt | tr -d \\n)
    key=$(base64 < K8S_KEYS_DIR/dex-web-app.key | tr -d \\n)
    echo "$manifests" | sed -e "s/\$crt/$crt/" -e "s/\$key/$key/" | kubectl apply -f -
    exit $?

  manifests: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: dex-web-app-tls
      namespace: kube-system
    type: Opaque
    data:
      dex-web-app.crt: $crt
      dex-web-app.key: $key
---
apiVersion: batch/v1
kind: Job
metadata:
  name: dex-web-app-init
  namespace: kube-system
  labels:
    k8s-app: dex-web-app
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  template:
    metadata:
      labels:
        k8s-app: dex-web-app
    spec:
      containers:
      - name: dex-web-app-init
        image: hfrog/common-init:v1.0
        command:
        - /bin/bash
        - -c
        - /bootstrap.sh >K8S_LOG_DIR/dex-web-app-init.log 2>&1
        env:
        - name: script
          valueFrom:
            configMapKeyRef:
              name: dex-web-app-init
              key: script
        - name: manifests
          valueFrom:
            configMapKeyRef:
              name: dex-web-app-init
              key: manifests
        volumeMounts:
        - name: data
          mountPath: K8S_KUBESRV_DIR
          readOnly: true
        - name: varlog
          mountPath: K8S_LOG_DIR
          readOnly: false
      volumes:
      - name: data
        hostPath:
          path: K8S_KUBESRV_DIR
      - name: varlog
        hostPath:
          path: K8S_LOG_DIR
      restartPolicy: Never
      # important, because needed files exist only on master node
      nodeSelector:
        role: master
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex-init
  namespace: kube-system
  labels:
    k8s-app: dex
    addonmanager.kubernetes.io/mode: Reconcile
data:
  script: |
    #!/bin/bash
    # vim: set sw=2 :

    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail
    shopt -s expand_aliases

    error_report() {
      echo "errexit on line $(caller)" >&2
    }

    trap error_report ERR

    DEBUG=${DEBUG:-false}
    if [[ $DEBUG == true ]]; then
      set -x
    fi

    # load variables
    eval declare $(cat K8S_DATA_DIR/dex/dex.cfg)

    token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    alias kubectl="./kubectl --token=$token"

    crt=$(base64 < K8S_CERTS_DIR/dex.crt | tr -d \\n)
    key=$(base64 < K8S_KEYS_DIR/dex.key | tr -d \\n)
    ldap_ca_crt=$(base64 < K8S_DATA_DIR/dex/$DEX__LDAP_CA_FILENAME | tr -d \\n)
    static_kubernetes_secret=$(echo -n $DEX__STATIC_KUBERNETES_SECRET | base64 | tr -d \\n)
    ldap_host=$(echo -n $DEX__LDAP_HOST | base64 | tr -d \\n)
    ldap_bind_dn=$(echo -n $DEX__LDAP_BIND_DN | base64 | tr -d \\n)
    ldap_bind_pw=$(echo -n $DEX__LDAP_BIND_PW | base64 | tr -d \\n)
    ldap_usersearch_base_dn=$(echo -n $DEX__LDAP_USERSEARCH_BASE_DN | base64 | tr -d \\n)
    ldap_groupsearch_base_dn=$(echo -n $DEX__LDAP_GROUPSEARCH_BASE_DN | base64 | tr -d \\n)

    echo "$manifests" | sed \
        -e "s/\$crt/$crt/" \
        -e "s/\$key/$key/" \
        -e "s/\$ldap_ca_crt/$ldap_ca_crt/" \
        -e "s/\$static_kubernetes_secret/$static_kubernetes_secret/" \
        -e "s/\$ldap_host/$ldap_host/" \
        -e "s/\$ldap_bind_dn/$ldap_bind_dn/" \
        -e "s/\$ldap_bind_pw/$ldap_bind_pw/" \
        -e "s/\$ldap_usersearch_base_dn/$ldap_usersearch_base_dn/" \
        -e "s/\$ldap_groupsearch_base_dn/$ldap_groupsearch_base_dn/" \
        | kubectl apply -f -
    exit $?

  manifests: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: dex-tls
      namespace: kube-system
    type: Opaque
    data:
      dex.crt: $crt
      dex.key: $key
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: ldap-ca-crt
      namespace: kube-system
    type: Opaque
    data:
      ldap-ca.crt: $ldap_ca_crt
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: dex-static
      namespace: kube-system
    type: Opaque
    data:
      kubernetes_secret: $static_kubernetes_secret
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: dex-ldap
      namespace: kube-system
    type: Opaque
    data:
      host: $ldap_host
      bindDN: $ldap_bind_dn
      bindPW: $ldap_bind_pw
      user_baseDN: $ldap_usersearch_base_dn
      group_baseDN: $ldap_groupsearch_base_dn
---
apiVersion: batch/v1
kind: Job
metadata:
  name: dex-init
  namespace: kube-system
  labels:
    k8s-app: dex
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  template:
    metadata:
      labels:
        k8s-app: dex
    spec:
      containers:
      - name: dex-init
        image: hfrog/common-init:v1.0
        command:
        - /bin/bash
        - -c
        - /bootstrap.sh >K8S_LOG_DIR/dex-init.log 2>&1
        env:
        - name: script
          valueFrom:
            configMapKeyRef:
              name: dex-init
              key: script
        - name: manifests
          valueFrom:
            configMapKeyRef:
              name: dex-init
              key: manifests
        volumeMounts:
        - name: data
          mountPath: K8S_KUBESRV_DIR
          readOnly: true
        - name: varlog
          mountPath: K8S_LOG_DIR
          readOnly: false
      volumes:
      - name: data
        hostPath:
          path: K8S_KUBESRV_DIR
      - name: varlog
        hostPath:
          path: K8S_LOG_DIR
      restartPolicy: Never
      # important, because needed files exist only on master node
      nodeSelector:
        role: master
