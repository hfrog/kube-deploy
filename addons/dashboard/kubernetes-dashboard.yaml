# vim: set sw=2 :
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Configuration to deploy release version of the Dashboard UI compatible with
# Kubernetes 1.8.
#
# Example usage: kubectl create -f <this_file>
# https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

# ------------------- Dashboard Secret ------------------- #
# will be created by init job
# ------------------- Dashboard Secret ------------------- #

kind: ConfigMap
apiVersion: v1
metadata:
  name: dashboard-init
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
data:
  script: |
    #!/bin/bash
    # vim: set sw=2 :

    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail
    shopt -s expand_aliases
    shopt -s nocasematch

    error_report() {
      echo "errexit on line $(caller)" >&2
    }

    is_true() {
      local return=1
      case $1 in
        y|yes|true)
          return=0
          ;;
        *)
          return=1
          ;;
      esac
      return $return
    }


    trap error_report ERR

    DEBUG=${DEBUG:-false}
    if is_true $DEBUG; then
      set -x
    fi

    token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    alias kubectl="./kubectl --token=$token"

    crt=$(base64 < K8S_CERTS_DIR/dashboard.crt | tr -d \\n)
    key=$(base64 < K8S_KEYS_DIR/dashboard.key | tr -d \\n)
    echo "$certs" | sed -e "s/\$crt/$crt/" -e "s/\$key/$key/" > kubernetes-dashboard-certs.yaml

    kubectl apply -f kubernetes-dashboard-certs.yaml
    exit $?

  certs: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: kubernetes-dashboard-certs
      namespace: kube-system
      labels:
        k8s-app: kubernetes-dashboard
    type: Opaque
    data:
      dashboard.crt: $crt
      dashboard.key: $key
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kubernetes-dashboard-init
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
      - name: kubernetes-dashboard-init
        image: hfrog/common-init:v1.0
        command:
        - /bin/bash
        - -c
        - /bootstrap.sh >K8S_LOG_DIR/dashboard-init.log 2>&1
        env:
        - name: script
          valueFrom:
            configMapKeyRef:
              name: dashboard-init
              key: script
        - name: certs
          valueFrom:
            configMapKeyRef:
              name: dashboard-init
              key: certs
        volumeMounts:
        - name: data
          mountPath: K8S_KUBESRV_DIR
          readOnly: true
        - name: varlog
          mountPath: K8S_LOG_DIR
          readOnly: false
      volumes:
      - name: data
        hostPath:
          path: K8S_KUBESRV_DIR
      - name: varlog
        hostPath:
          path: K8S_LOG_DIR
      serviceAccountName: kubernetes-dashboard
      restartPolicy: Never
      # important, because needed certs exist only on master node
      nodeSelector:
        role: master
---
# ------------------- Dashboard Service Account ------------------- #

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard
  namespace: kube-system

---
# ------------------- Dashboard Role & Role Binding ------------------- #

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
  # Allow Dashboard to create 'kubernetes-dashboard-settings' config map.
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create"]
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
  verbs: ["get", "update", "delete"]
  # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["kubernetes-dashboard-settings"]
  verbs: ["get", "update"]
  # Allow Dashboard to get metrics from heapster.
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["heapster"]
  verbs: ["proxy"]
- apiGroups: [""]
  resources: ["services/proxy"]
  resourceNames: ["heapster", "http:heapster:", "https:heapster:"]
  verbs: ["get"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard-minimal
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system

---
# ------------------- Dashboard Deployment ------------------- #

kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      containers:
      - name: kubernetes-dashboard
        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.8.2
        command:
        - /dashboard
        - --bind-address=0.0.0.0
        - --default-cert-dir=/certs
        - --tls-key-file=dashboard.key
        - --tls-cert-file=dashboard.crt
        #- --logtostderr=false
        #- --log_dir=K8S_LOG_DIR/
        # Uncomment the following line to manually specify Kubernetes API server Host
        # If not specified, Dashboard will attempt to auto discover the API server and connect
        # to it. Uncomment only if the default does not work.
        # - --apiserver-host=http://my-address:port
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8443
          protocol: TCP
        volumeMounts:
        - name: kubernetes-dashboard-certs
          mountPath: /certs
          readOnly: true
          # Create on-disk volume to store exec logs
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: kubernetes-dashboard-certs
        secret:
          secretName: kubernetes-dashboard-certs
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: "CriticalAddonsOnly"
        operator: "Exists"

---
# ------------------- Dashboard Service ------------------- #

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    k8s-app: kubernetes-dashboard
